version: '3'

services:
  traefik:
    image: traefik:v2.4
    restart: unless-stopped
    command:
      - --api.dashboard=true

      - --providers.file=true
      - --providers.file.directory=/traefik/config
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false

      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.middlewares=cors@file

      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.middlewares=cors@file
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./traefik:/traefik"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN:-achieve.localhost}`)"
    environment:
      DOMAIN: ${DOMAIN:-achieve.localhost}

  db:
    build: ./postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: "${DB_USERNAME}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      API_DB: "api"
      API_DB_USER: "${API_DB_USERNAME}"
      API_DB_PASSWORD: "${API_DB_PASSWORD}"
    volumes:
      - "db_data:/var/lib/postgresql/data"

  admin:
    build:
      context: ./admin
      target: prod
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.admin.loadbalancer.server.port=80"
      - "traefik.http.routers.admin.service=admin"
      - "traefik.http.routers.admin.rule=Host(`admin.${DOMAIN:-achieve.localhost}`)"
      - "traefik.http.routers.admin.tls=true"

  web:
    build:
      context: ./web
      target: prod
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.web.loadbalancer.server.port=80"
      - "traefik.http.routers.web.service=web"
      - "traefik.http.routers.web.rule=Host(`${DOMAIN:-achieve.localhost}`)"
      - "traefik.http.routers.web.tls=true"

  api:
    build:
      context: ./api
      target: prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN:-achieve.localhost}`)"
    environment:
      DOMAIN: "${DOMAIN:-achieve.localhost}"
      DATABASE_URL: "postgresql://${API_DB_USERNAME}:${API_DB_PASSWORD}@db/api"
      ADMIN_LIST: "${ADMIN_LIST}"
      SESSION_SECRET: "${SESSION_SECRET}"
      DISCORD_OAUTH_CLIENT_ID: "${DISCORD_OAUTH_CLIENT_ID}"
      DISCORD_OAUTH_CLIENT_SECRET: "${DISCORD_OAUTH_CLIENT_SECRET}"
      TWITTER_OAUTH_CLIENT_ID: "${TWITTER_OAUTH_CLIENT_ID}"
      TWITTER_OAUTH_CLIENT_SECRET: "${TWITTER_OAUTH_CLIENT_SECRET}"

volumes:
  db_data:

